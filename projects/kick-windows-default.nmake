#
#   kick-windows-default.nmake -- Makefile to build Embedthis Kickstart for windows
#

PRODUCT            = kick
VERSION            = 1.0.0
BUILD_NUMBER       = 0
PROFILE            = default
PA                 = $(PROCESSOR_ARCHITECTURE)

!IF "$(PA)" == "AMD64"
ARCH               = x64
ENTRY              = _DllMainCRTStartup
!ELSE
ARCH               = x86
ENTRY              = _DllMainCRTStartup@12
!ENDIF

OS                 = windows
CONFIG             = $(OS)-$(ARCH)-$(PROFILE)
LBIN               = $(CONFIG)\bin

BIT_PACK_APPWEB    = 1

!IF "$(BIT_PACK_LIB)" == "1"
BIT_PACK_COMPILER = 1
!ENDIF

!IF "$(BIT_PACK_RC)" == "1"
BIT_PACK_WINSDK = 1
!ENDIF


BIT_PACK_APPWEB_PATH      = C:/Program Files/Embedthis Appweb
BIT_PACK_COMPILER_PATH    = cl
BIT_PACK_LIB_PATH         = lib.exe
BIT_PACK_LINK_PATH        = link
BIT_PACK_RC_PATH          = rc
BIT_PACK_WINSDK_PATH      = winsdk

CC                 = cl
LD                 = link
RC                 = rc
CFLAGS             = -nologo -GR- -W3 -O2 -MD
DFLAGS             = -D_REENTRANT -D_MT -DBIT_PACK_APPWEB=$(BIT_PACK_APPWEB) 
IFLAGS             = -I$(CONFIG)\inc
LDFLAGS            = -nologo -nodefaultlib -incremental:no -machine:$(ARCH)
LIBPATHS           = "-libpath:$(CONFIG)\bin"
LIBS               = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

BIT_ROOT_PREFIX    = C:
BIT_BASE_PREFIX    = $(BIT_ROOT_PREFIX)\Program Files
BIT_APP_PREFIX     = $(BIT_BASE_PREFIX)\Embedthis Kickstart
BIT_VAPP_PREFIX    = $(BIT_APP_PREFIX)
BIT_DATA_PREFIX    = $(BIT_VAPP_PREFIX)
BIT_STATE_PREFIX   = $(BIT_VAPP_PREFIX)
BIT_BIN_PREFIX     = $(BIT_VAPP_PREFIX)\bin
BIT_INC_PREFIX     = $(BIT_VAPP_PREFIX)\inc
BIT_LIB_PREFIX     = $(BIT_VAPP_PREFIX)\lib
BIT_MAN_PREFIX     = $(BIT_VAPP_PREFIX)\man
BIT_ETC_PREFIX     = $(BIT_VAPP_PREFIX)
BIT_WEB_PREFIX     = $(BIT_VAPP_PREFIX)\web
BIT_LOG_PREFIX     = $(BIT_VAPP_PREFIX)\log
BIT_SPOOL_PREFIX   = $(BIT_VAPP_PREFIX)\tmp
BIT_CACHE_PREFIX   = $(BIT_VAPP_PREFIX)\cache
BIT_SRC_PREFIX     = $(BIT_VAPP_PREFIX)\src


TARGETS            = $(TARGETS) client\css\all-1.0.0.min.css
TARGETS            = $(TARGETS) client\css\all-1.0.0.min.css.gz
TARGETS            = $(TARGETS) client\app\all.html.js
TARGETS            = $(TARGETS) client\app\all.html.js
TARGETS            = $(TARGETS) client\all-1.0.0.min.js
TARGETS            = $(TARGETS) client\all-1.0.0.min.js
TARGETS            = $(TARGETS) client\all-1.0.0.min.js.gz

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(BIT_APP_PREFIX)" == ""
	echo "BIT_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(CONFIG)\bin md $(CONFIG)\bin
	@if not exist $(CONFIG)\inc md $(CONFIG)\inc
	@if not exist $(CONFIG)\obj md $(CONFIG)\obj
	@if not exist $(CONFIG)\inc\bit.h copy projects\kick-windows-default-bit.h $(CONFIG)\inc\bit.h

clean:



#
#   version
#
version: $(DEPS_1)
	@echo 1.0.0-0










#
#   stop
#
stop: $(DEPS_2)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_3)
	if not exist "C:" md "C:"
	copy /Y appweb.conf C:\appweb.conf
	copy /Y hosted.conf C:\hosted.conf
	copy /Y esp.json C:\esp.json
	if not exist "C:\client" md "C:\client"
	copy /Y client\index.esp C:\client\index.esp
	copy /Y client\all-1.0.0.min.js.gz C:\client\all-1.0.0.min.js.gz
	if not exist "C:\client\css" md "C:\client\css"
	copy /Y client\css\all-1.0.0.min.*.gz C:\client\css\all-1.0.0.min.*.gz
	if not exist "C:\client\assets" md "C:\client\assets"
	copy /Y client\assets\favicon.ico C:\client\assets\favicon.ico
	copy /Y client\assets\grid_noise.png C:\client\assets\grid_noise.png
	copy /Y client\assets\linen.png C:\client\assets\linen.png
	copy /Y client\assets\sunset.jpg C:\client\assets\sunset.jpg
	if not exist "C:\client\lib\bootstrap\fonts" md "C:\client\lib\bootstrap\fonts"
	copy /Y client\lib\bootstrap\fonts\glyphicons-halflings-regular.eot C:\client\lib\bootstrap\fonts\glyphicons-halflings-regular.eot
	copy /Y client\lib\bootstrap\fonts\glyphicons-halflings-regular.svg C:\client\lib\bootstrap\fonts\glyphicons-halflings-regular.svg
	copy /Y client\lib\bootstrap\fonts\glyphicons-halflings-regular.ttf C:\client\lib\bootstrap\fonts\glyphicons-halflings-regular.ttf
	copy /Y client\lib\bootstrap\fonts\glyphicons-halflings-regular.woff C:\client\lib\bootstrap\fonts\glyphicons-halflings-regular.woff
	if not exist "C:\client\lib\font-awesome\fonts" md "C:\client\lib\font-awesome\fonts"
	copy /Y client\lib\font-awesome\fonts\fontawesome-webfont.eot C:\client\lib\font-awesome\fonts\fontawesome-webfont.eot
	copy /Y client\lib\font-awesome\fonts\fontawesome-webfont.svg C:\client\lib\font-awesome\fonts\fontawesome-webfont.svg
	copy /Y client\lib\font-awesome\fonts\fontawesome-webfont.ttf C:\client\lib\font-awesome\fonts\fontawesome-webfont.ttf
	copy /Y client\lib\font-awesome\fonts\fontawesome-webfont.woff C:\client\lib\font-awesome\fonts\fontawesome-webfont.woff
	copy /Y client\lib\font-awesome\fonts\FontAwesome.otf C:\client\lib\font-awesome\fonts\FontAwesome.otf
	if not exist "C:\cache" md "C:\cache"
	copy /Y cache\app_3ca919087b84fe779f4804222110add7.dylib C:\cache\app_3ca919087b84fe779f4804222110add7.dylib
	copy /Y cache\controller_01b72c2c6fe8cbf3d3b3fa0e8049419c.dylib C:\cache\controller_01b72c2c6fe8cbf3d3b3fa0e8049419c.dylib
	copy /Y cache\controller_1aba15fe6e31f2109b01553e8e68e78e.dylib C:\cache\controller_1aba15fe6e31f2109b01553e8e68e78e.dylib
	copy /Y cache\controller_334fdc191a00c718c8c765e00a79466d.dylib C:\cache\controller_334fdc191a00c718c8c765e00a79466d.dylib
	copy /Y cache\controller_3d936798245edcc0ddb1334c751b1312.dylib C:\cache\controller_3d936798245edcc0ddb1334c751b1312.dylib
	copy /Y cache\controller_3df9eca88b8bb1d92c75b65180a8ef80.dylib C:\cache\controller_3df9eca88b8bb1d92c75b65180a8ef80.dylib
	copy /Y cache\controller_72d321bb855e3d34368fa643af0e9a0c.dylib C:\cache\controller_72d321bb855e3d34368fa643af0e9a0c.dylib
	copy /Y cache\controller_886d4847c82aba55d4dd44f1cc5aba70.dylib C:\cache\controller_886d4847c82aba55d4dd44f1cc5aba70.dylib
	copy /Y cache\controller_9bd4d87c3f479d3449278bfc165be143.dylib C:\cache\controller_9bd4d87c3f479d3449278bfc165be143.dylib
	copy /Y cache\controller_c9fc6b13d4f842d40c3020b2a803c839.dylib C:\cache\controller_c9fc6b13d4f842d40c3020b2a803c839.dylib
	copy /Y cache\controller_ce5d973194a100f3208dcfa664ca672f.dylib C:\cache\controller_ce5d973194a100f3208dcfa664ca672f.dylib
	copy /Y cache\controller_e63cffce00b984793065b29c604cccb2.dylib C:\cache\controller_e63cffce00b984793065b29c604cccb2.dylib
	copy /Y cache\view_48547d50c94180de2d6178cf0b323f0b.dylib C:\cache\view_48547d50c94180de2d6178cf0b323f0b.dylib
	if not exist "C:\db" md "C:\db"
	copy /Y db\kick.mdb C:\db\kick.mdb

#
#   start
#
start: $(DEPS_4)
#  Omit build script start

#
#   install
#
DEPS_5 = $(DEPS_5) stop
DEPS_5 = $(DEPS_5) installBinary
DEPS_5 = $(DEPS_5) start

install: $(DEPS_5)


#
#   uninstall
#
DEPS_6 = $(DEPS_6) stop

uninstall: $(DEPS_6)

#
#   run
#
DEPS_7 = $(DEPS_7) comp

run: $(DEPS_7)
	esp run
