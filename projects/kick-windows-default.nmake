#
#   kick-windows-default.nmake -- Makefile to build Embedthis Kickstart for windows
#

PRODUCT            = kick
VERSION            = 1.0.0
BUILD_NUMBER       = 0
PROFILE            = default
PA                 = $(PROCESSOR_ARCHITECTURE)

!IF "$(PA)" == "AMD64"
ARCH               = x64
ENTRY              = _DllMainCRTStartup
!ELSE
ARCH               = x86
ENTRY              = _DllMainCRTStartup@12
!ENDIF

OS                 = windows
CONFIG             = $(OS)-$(ARCH)-$(PROFILE)
LBIN               = $(CONFIG)\bin

BIT_PACK_APPWEB    = 1

!IF "$(BIT_PACK_LIB)" == "1"
BIT_PACK_COMPILER = 1
!ENDIF

!IF "$(BIT_PACK_RC)" == "1"
BIT_PACK_WINSDK = 1
!ENDIF


BIT_PACK_APPWEB_PATH      = C:/Program Files/Embedthis Appweb
BIT_PACK_COMPILER_PATH    = cl
BIT_PACK_LIB_PATH         = lib.exe
BIT_PACK_LINK_PATH        = link
BIT_PACK_RC_PATH          = rc
BIT_PACK_WINSDK_PATH      = winsdk

CC                 = cl
LD                 = link
RC                 = rc
CFLAGS             = -nologo -GR- -W3 -O2 -MD
DFLAGS             = -D_REENTRANT -D_MT -DBIT_PACK_APPWEB=$(BIT_PACK_APPWEB) 
IFLAGS             = -I$(CONFIG)\inc
LDFLAGS            = -nologo -nodefaultlib -incremental:no -machine:$(ARCH)
LIBPATHS           = "-libpath:$(CONFIG)\bin"
LIBS               = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

BIT_ROOT_PREFIX    = C:
BIT_BASE_PREFIX    = $(BIT_ROOT_PREFIX)\Program Files
BIT_APP_PREFIX     = $(BIT_BASE_PREFIX)\Embedthis Kickstart
BIT_VAPP_PREFIX    = $(BIT_APP_PREFIX)
BIT_DATA_PREFIX    = $(BIT_VAPP_PREFIX)
BIT_STATE_PREFIX   = $(BIT_VAPP_PREFIX)
BIT_BIN_PREFIX     = $(BIT_VAPP_PREFIX)\bin
BIT_INC_PREFIX     = $(BIT_VAPP_PREFIX)\inc
BIT_LIB_PREFIX     = $(BIT_VAPP_PREFIX)\lib
BIT_MAN_PREFIX     = $(BIT_VAPP_PREFIX)\man
BIT_ETC_PREFIX     = $(BIT_VAPP_PREFIX)
BIT_WEB_PREFIX     = $(BIT_VAPP_PREFIX)\web
BIT_LOG_PREFIX     = $(BIT_VAPP_PREFIX)\log
BIT_SPOOL_PREFIX   = $(BIT_VAPP_PREFIX)\tmp
BIT_CACHE_PREFIX   = $(BIT_VAPP_PREFIX)\cache
BIT_SRC_PREFIX     = $(BIT_VAPP_PREFIX)\src


TARGETS            = $(TARGETS) client\css\all-1.0.0.min.css
TARGETS            = $(TARGETS) client\css\all-1.0.0.min.css.gz
TARGETS            = $(TARGETS) client\app\all.html.js
TARGETS            = $(TARGETS) client\app\all.html.js
TARGETS            = $(TARGETS) client\all-1.0.0.min.js
TARGETS            = $(TARGETS) client\all-1.0.0.min.js
TARGETS            = $(TARGETS) client\all-1.0.0.min.js.gz

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(BIT_APP_PREFIX)" == ""
	echo "BIT_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(CONFIG)\bin md $(CONFIG)\bin
	@if not exist $(CONFIG)\inc md $(CONFIG)\inc
	@if not exist $(CONFIG)\obj md $(CONFIG)\obj
	@if not exist $(CONFIG)\inc\bit.h copy projects\kick-windows-default-bit.h $(CONFIG)\inc\bit.h

clean:



#
#   version
#
version: $(DEPS_1)
	@echo 1.0.0-0










#
#   stop
#
stop: $(DEPS_2)
#  Omit build script stop

#
#   installBinary
#
installBinary: $(DEPS_3)
	if not exist "${root}" md "${root}"
	copy /Y app.conf ${root}\app.conf
	copy /Y appweb.conf ${root}\appweb.conf
	if not exist "." md "."
	copy /Y config.json ${root}
	if not exist "${root}\client" md "${root}\client"
	copy /Y client\index.esp ${root}\client\index.esp
	copy /Y client\all-1.0.0.min.js.gz ${root}\client\all-1.0.0.min.js.gz
	if not exist "${root}\client\css" md "${root}\client\css"
	copy /Y client\css\all-1.0.0.min.css.gz ${root}\client\css\all-1.0.0.min.css.gz
	if not exist "${root}\client\assets" md "${root}\client\assets"
	copy /Y client\assets\favicon.ico ${root}\client\assets\favicon.ico
	copy /Y client\assets\grid_noise.png ${root}\client\assets\grid_noise.png
	copy /Y client\assets\linen.png ${root}\client\assets\linen.png
	copy /Y client\assets\sunset.jpg ${root}\client\assets\sunset.jpg
	if not exist "${root}\client\lib\bootstrap\fonts" md "${root}\client\lib\bootstrap\fonts"
	copy /Y client\lib\bootstrap\fonts\glyphicons-halflings-regular.eot ${root}\client\lib\bootstrap\fonts\glyphicons-halflings-regular.eot
	copy /Y client\lib\bootstrap\fonts\glyphicons-halflings-regular.svg ${root}\client\lib\bootstrap\fonts\glyphicons-halflings-regular.svg
	copy /Y client\lib\bootstrap\fonts\glyphicons-halflings-regular.ttf ${root}\client\lib\bootstrap\fonts\glyphicons-halflings-regular.ttf
	copy /Y client\lib\bootstrap\fonts\glyphicons-halflings-regular.woff ${root}\client\lib\bootstrap\fonts\glyphicons-halflings-regular.woff
	if not exist "${root}\client\lib\font-awesome\fonts" md "${root}\client\lib\font-awesome\fonts"
	copy /Y client\lib\font-awesome\fonts\fontawesome-webfont.eot ${root}\client\lib\font-awesome\fonts\fontawesome-webfont.eot
	copy /Y client\lib\font-awesome\fonts\fontawesome-webfont.svg ${root}\client\lib\font-awesome\fonts\fontawesome-webfont.svg
	copy /Y client\lib\font-awesome\fonts\fontawesome-webfont.ttf ${root}\client\lib\font-awesome\fonts\fontawesome-webfont.ttf
	copy /Y client\lib\font-awesome\fonts\fontawesome-webfont.woff ${root}\client\lib\font-awesome\fonts\fontawesome-webfont.woff
	copy /Y client\lib\font-awesome\fonts\FontAwesome.otf ${root}\client\lib\font-awesome\fonts\FontAwesome.otf
	if not exist "${root}\cache" md "${root}\cache"
	copy /Y cache\kick.dylib ${root}\cache\kick.dylib
	if not exist "${root}\db" md "${root}\db"
	copy /Y db\kick.mdb ${root}\db\kick.mdb

#
#   start
#
start: $(DEPS_4)
#  Omit build script start

#
#   install
#
DEPS_5 = $(DEPS_5) stop
DEPS_5 = $(DEPS_5) installBinary
DEPS_5 = $(DEPS_5) start

install: $(DEPS_5)


#
#   uninstall
#
DEPS_6 = $(DEPS_6) stop

uninstall: $(DEPS_6)

#
#   run
#
DEPS_7 = $(DEPS_7) comp

run: $(DEPS_7)
	esp run
