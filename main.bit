/*
    main.bit -- Main Bit file for Kickstart

    This file contains the rules for targets to build and default settings for configuration.
    The Bit utility (http://ejscript.org) may be used to build GoAhead instead of make. Bit provides
    for configured builds and generates projects files.

    Alternatively, build using the "make" utility in which case this file is not used.
 */

Bit.load({
    blend: [
        "${BITS}/embedthis.bit",
    ],

    settings: {
        product: 'kick',
        title: 'Embedthis Kickstart',
        company: 'Embedthis',
        version: '1.0.0',
        buildNumber: '0',
        bit: '0.8.6',
        sync: [ ],
        packs: [ 'bits/packs' ],

        /*
            Installation prefix set
         */
        prefixes: 'embedthis-prefixes',
        manifest: 'package/manifest.bit',

        /*
            Optional packs to automatically discover and configure
         */
        '+discover': [ ],
        '+requires': [ 'compiler', 'appweb' ],

        /*
            Packs to disable when using --without all
         */
        'without-all': [ ],

        kick: {
            css: {
                minify: true,
                flat: true,
                compress: true,
            },
            html: {
                minify: true,
                flat: true,
                compress: false,
            },
            js: {
                minify: false,
                flat: false,
                compress: false,
            },
            c: {
                flat: true,
            },
        },
    },

    usage: {
        'kick.css.minify':       'Minify Less and CSS (true|false)',
    },

    customize: [
        /* 
            The optional custom.bit file is loaded after main.bit is fully processed. It can
            thus override any setting. Feel free to create and customize. 
         */
        'custom.bit',
    ],

    scripts: {
        postconfig: "
        ",
    },

    targets: {
        comp: {
            build: "
                let kick = bit.settings.kick
                if (kick.c.flat) {
                    run('esp -flat -r -q compile')
                } else {
                    run('esp -r -q compile')
                }
            ",
        },
        cleanCache: {
            type: 'clean',
            action: "rm('cache/*')",
        },
        cleanMin: {
            type: 'clean',
            action: "rm('**/*.min.*')"
        },
       'all.css': {
            path: 'client/css/all.min.css.gz',
            files: [ 'client/css/*.less' ],
            build: "
                let kick = bit.settings.kick;
                if (kick.css.flat) {
                    trace('Compile', 'client/css/all.css.min.gz')
                    rm('client/css/all.min.css.gz')
                    let switches = kick.css.minify ? '-compress' : ''
                    strace('recess ' + switches + ' -compile client/css/all.less')
                    let result = Cmd.run('recess ' + switches + ' -compile client/css/all.less')
                    for each (f in Path('client/css').files('*.css')) {
                        result += f.readString()
                    }
                    Path('client/css/all.min.css').write(result)
                    if (kick.css.compress) {
                        run('gzip client/css/all.min.css')
                    }
                }                                                                                      
            ",
        },
        'all.js': {
            path: 'client/all.min.js.gz',
            files: [ '**.js' ],
            exclude: /client\/lib\/all.min.js|client\/lib\/spare\/|client\/lib\/html5shiv/,
            depends: ['all.html'],
            build: "
                let kick = bit.settings.kick
                if (kick.js.minify) {
                dump('KICK', kick)
                    trace('Compile', 'client/all.min.js.gz')
                    if (!Cmd.locate('uglifyjs')) {
                        trace('Warning', 'Cannot locate \"uglify\" to minify. Will just catenate scripts.')
                    }
                    if (Cmd.locate('ngmin')) {
                        for each (f in Path('client/app').files('**.js', {exclude: /\.min.js|\.ng.js/})) {
                            let ng = f.replaceExt('ng.js')
                            if (!ng.exists || ng.modified < f.modified) {
                                run('ngmin ' + f + ' ' + ng)
                                run('uglifyjs -o ' + f.replaceExt('min.js') + ' ' + ng)
                                ng.remove()
                            }
                        }
                    }
                    for each (f in Path('client').files('**.js', {exclude: /\.min.js/})) {
                        let minified = f.replaceExt('min.js')
                        if (!minified.exists || minified.modified < f.modified) {
                            if (Cmd.locate('uglifyjs')) {
                                run('uglifyjs -o ' + f.replaceExt('min.js') + ' ' + f)
                            } else {
                                f.copy(f.replaceExt('min.js'))
                            }
                        }
                        if (kick.js.compress && !kick.js.flat) {
                            run('gzip ' + minified)
                        }
                    }
                    if (kick.js.flat) {
                        rm('client/all.min.js.gz')
                        let list = []
                        let config = Path('config.json').readJSON();
                        for (let [component,details] in config.settings.components) {
                            for each (file in details.scripts) {
                                if (file == '*') {
                                    list += Path('client/lib').join(component).files('*.min.js')
                                } else {
                                    list.push(Path('client/lib').join(component, Path(file).replaceExt('min.js')))
                                }
                            }
                        }
                        /* Main.min must be first */
                        list += ['client/app/main.min.js']
                        list += Path('client').files('app/**.min.js', {exclude: /main.min.js/})
                        let all = Path('client/all.min.js')
                        strace('Files', list.join('\n'))
                        for each (let f:Path in list) {
                            all.append(';' + f.readString())
                        }
                        if (kick.js.compress) {
                            run('gzip client/all.min.js')
                            for each (f in Path('client').files('**.min.js', {exclude: /all.min.js.gz/})) {
                                f.remove()
                            }
                        }
                    }
                }
            ",
        },

        'all.html': {
            path: 'client/app/all.html.js',
            files: [ '**.html' ],
            exclude: /client\/lib\/all.min.html/,
            build: "
                let kick = bit.settings.kick
                let list = []
                if (kick.html.minify) {
                    trace('Minify', 'HTML')
                    if (!Cmd.locate('htmlmin')) {
                        trace('Warning', 'Cannot locate \"htmlmin\" to minify.')
                    }
                    for each (f in Path('client').files('**.html', {exclude: /\.min.html/})) {
                        let minified = f.replaceExt('min.html')
                        if (!minified.exists || minified.modified < f.modified) {
                            if (false && Cmd.locate('htmlmin')) {
                                run('htmlmin ' + f)
                            } else {
                                f.copy(minified)
                            }
                        }
                        list.push(minified)
                        if (kick.html.compress && !kick.html.flat) {
                            run('gzip ' + minified)
                        }
                    }
                    if (kick.html.flat) {
                        let all = Path('client/app/all.html.js')
                        trace('Convert', all)
                        all.append('angular.module(\"app\").run(function(Esp, $templateCache) {')
                        strace('Files', list.join('\n'))
                        for each (let f:Path in list) {
                            let file = f.relativeTo('client').replace('.min.html', '.html')
                            let data = f.readLines()
                            for (let [key,value] in data) {
                                data[key] = value.replace(/\"/g, '\\\\\"')
                            }
                            data = data.join('\\\\\n')
                            all.append('\n    $templateCache.put(Esp.url(\"' + file + '\"), \"' + data + '\");\n')
                            f.remove()
                        }
                        all.append('});')
                        if (kick.html.compress && !kick.js.flat) {
                            run('gzip ' + all)
                            /* Keep all.html.js so that it won't rebuild each time */
                        } else {
                            /* Force a rebuild of the all.js */
                            Path('client/all.min.js.gz').remove()
                        }
                    }
                }
            ",
        },
        run: {
            depends: ['comp'],
            run: 'esp run',
        },
    },

    packDefaults: {
    },
})
