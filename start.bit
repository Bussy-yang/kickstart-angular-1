/*
    start.bit - Bit build file
 */

Bit.load({
    settings: {
        bit: '0.8.6',
    },
    targets: {
        comp: {
            build: "run('esp -r -q compile')",
        },
        run: {
            depends: ['comp'],
            run: 'appweb -v',
        },
        cleanCache: {
            type: 'clean',
            action: "rm('cache/*')",
        },
        cleanMin: {
            type: 'clean',
            action: "rm('**/*.min.*')"
        },
        'all.css': {
            path: 'client/css/all.min.css.gz',
            files: [ 'client/css/*.less' ],
            build: "
                trace('Compile', 'client/css/all.css.min.gz')
                rm('client/css/all.min.css.gz')
                strace('recess -compress -compile client/css/all.less')
                let result = Cmd.run('recess -compress -compile client/css/all.less')
                for each (f in Path('client/css').files('*.css')) {
                    result += f.readString()
                }
                Path('client/css/all.min.css').write(result)
                run('gzip client/css/all.min.css')
            ",
        },

        'all.js': {
            path: 'client/all.min.js.gz',
            files: [ '**.js' ],
            exclude: /client\/lib\/all.min.js|client\/lib\/spare\/|client\/lib\/html5shiv/,
            build: "
                trace('Compile', 'client/all.min.js.gz')
                if (!Cmd.locate('uglifyjs')) {
                    trace('Warning', 'Cannot locate \"uglify\" to minify. Will just catenate scripts.')
                }
                if (Cmd.locate('ngmin')) {
                    for each (f in Path('client/app').files('**.js', {exclude: /\.min.js|\.ng.js/})) {
                        let ng = f.replaceExt('ng.js')
                        if (!ng.exists || ng.modified < f.modified) {
                            run('ngmin ' + f + ' ' + ng)
                            run('uglifyjs -o ' + f.replaceExt('min.js') + ' ' + ng)
                            ng.remove()
                        }
                    }
                }
                for each (f in Path('client').files('**.js', {exclude: /\.min.js/})) {
                    let minified = f.replaceExt('min.js')
                    if (!minified.exists || minified.modified < f.modified) {
                        if (Cmd.locate('uglifyjs')) {
                            run('uglifyjs -o ' + f.replaceExt('min.js') + ' ' + f)
                        } else {
                            f.copy(f.replaceExt('min.js'))
                        }
                    }
                }
                rm('client/all.min.js.gz')
                let list = []
                let config = Path('config.json').readJSON();
                for (let [component,details] in config.settings.components) {
                    for each (file in details.scripts) {
                        if (file == '*') {
                            list += Path('client/lib').join(component).files('*.min.js')
                        } else {
                            list.push(Path('client/lib').join(component, file))
                        }
                    }
                }
                list += ['client/app/main.min.js']
                list += Path('client').files('app/**.min.js', {exclude: /main.min.js/})
                let all = Path('client/all.min.js')
                strace('Files', list.join('\n'))
                for each (let f:Path in list) {
                    all.append(';' + f.readString())
                }
                run('gzip client/all.min.js')
                for each (f in Path('client').files('**.min.js', {exclude: /all.min.js.gz/})) {
                    f.remove()
                }
            ",
        },
    },
})
